#! /usr/bin/env python
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import argparse
import logging
import os
import shutil
import sys

import libmorse
from libmorse import exceptions


log = libmorse.get_logger(__name__)


def include_func(args):
    for path in args.path:
        src = os.path.abspath(path)
        dest = os.path.join(
            libmorse.PROJECT,
            os.path.basename(src)
        )
        if all(map(os.path.exists, [src])):
            log.info("Copy %s to %s.", src, dest)
            shutil.copytree(src, dest)
        else:
            raise exceptions.MorseError("invalid path(s)")

def main():
    mparser = argparse.ArgumentParser(
        description="Convert timed signals into alphabet."
    )
    mparser.add_argument(
        "-v", "--verbose", action="store_true",
        help="show debugging messages"
    )
    submparser = mparser.add_subparsers(title="commands")

    include_parser = submparser.add_parser(
        "include",
        help="include external dirs/files to the installed project directory",
    )
    include_parser.add_argument(
        "path", metavar="PATH", nargs="+",
        help="path to file or directory that you want to copy"
    )
    include_parser.set_defaults(func=include_func)

    args = mparser.parse_args()
    level = logging.DEBUG if args.verbose else logging.INFO
    log.setLevel(level)
    exception = None
    try:
        args.func(args)
    except Exception as exc:
        log.error(exc)
        exception = exc
    else:
        log.info("Operation completed successfully.")
    return libmorse.get_return_code(exception)


if __name__ == "__main__":
    return_code = main()
    log.debug("Exiting with code %d.", return_code)
    sys.exit(return_code)
